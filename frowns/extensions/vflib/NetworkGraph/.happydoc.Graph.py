(S'ac24c87c603c52fe19bf7352c03b4e0c'
p1
(ihappydoclib.parseinfo.moduleinfo
ModuleInfo
p2
(dp3
S'_namespaces'
p4
((dp5
S'Graph'
p6
(ihappydoclib.parseinfo.classinfo
ClassInfo
p7
(dp8
g4
((dp9
(dp10
S'to_graph'
p11
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p12
(dp13
g4
((dp14
(dp15
tp16
sS'_exception_info'
p17
(dp18
sS'_parameter_names'
p19
(S'self'
p20
tp21
sS'_parameter_info'
p22
(dp23
g20
(NNNtp24
ssS'_filename'
p25
S'../python/frowns/extensions/vflib/NetworkGraph/Graph.py'
p26
sS'_docstring'
p27
S'->return an ARGEdit object from this graph'
p28
sS'_name'
p29
g11
sS'_parent'
p30
g7
sS'_comment_info'
p31
(dp32
(S'is_remove'
tp33
S' for now these molecules will be immutable\n'
p34
ssS'_configuration_values'
p35
(dp36
sS'_class_info'
p37
g14
sS'_function_info'
p38
g15
sS'_comments'
p39
S''
sbsS'dump'
p40
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p41
(dp42
g4
((dp43
(dp44
tp45
sg17
(dp46
sg19
(S'self'
p47
tp48
sg22
(dp49
g47
(NNNtp50
ssg25
g26
sg27
S'Print out the nodes topology in human readable form'
p51
sg29
g40
sg30
g7
sg31
g32
sg35
(dp52
sg37
g43
sg38
g44
sg39
S''
sbsS'has_node'
p53
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p54
(dp55
g4
((dp56
(dp57
tp58
sg17
(dp59
sg19
(S'self'
p60
S'node'
p61
tp62
sg22
(dp63
g61
(NNNtp64
sg60
(NNNtp65
ssg25
g26
sg27
S'return 1 if the graph has the component node'
p66
sg29
g53
sg30
g7
sg31
g32
sg35
(dp67
sg37
g56
sg38
g57
sg39
S''
sbsS'add_node'
p68
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p69
(dp70
g4
((dp71
(dp72
tp73
sg17
(dp74
S'"Already have node"'
p75
Nssg19
(S'self'
p76
S'node'
p77
tp78
sg22
(dp79
g77
(NNNtp80
sg76
(NNNtp81
ssg25
g26
sg27
S'(node)-> add a node instance to the graph'
p82
sg29
g68
sg30
g7
sg31
g32
sg35
(dp83
sg37
g71
sg38
g72
sg39
S''
sbsS'clone'
p84
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p85
(dp86
g4
((dp87
(dp88
tp89
sg17
(dp90
sg19
(S'self'
p91
S'ignoreNodes'
p92
S'ignoreEdges'
p93
tp94
sg22
(dp95
g91
(NNNtp96
sg93
(I1
S'None'
Ntp97
sg92
(I1
S'None'
Ntp98
ssg25
g26
sg27
S"->return a clone of this graph\n        Note that the actual node and edge objects\n        are not cloned!  So affecting the node properties of\n        one graph might change the node of the cloned\n        graph.  The topology's are distinct though."
p99
sg29
g84
sg30
g7
sg31
g32
sg35
(dp100
sg37
g87
sg38
g88
sg39
S''
sbsS'has_edge'
p101
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p102
(dp103
g4
((dp104
(dp105
tp106
sg17
(dp107
sg19
(S'self'
p108
S'edge'
p109
tp110
sg22
(dp111
g108
(NNNtp112
sg109
(NNNtp113
ssg25
g26
sg27
S'return 1 if the graph has the component edge'
p114
sg29
g101
sg30
g7
sg31
g32
sg35
(dp115
sg37
g104
sg38
g105
sg39
S''
sbsS'remove_node'
p116
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p117
(dp118
g4
((dp119
(dp120
tp121
sg17
(dp122
sg19
(S'self'
p123
S'node'
p124
tp125
sg22
(dp126
g124
(NNNtp127
sg123
(NNNtp128
ssg25
g26
sg27
S'(node)->remove node from the graph'
p129
sg29
g116
sg30
g7
sg31
g32
sg35
(dp130
sg37
g119
sg38
g120
sg39
S''
sbsS'add_edge'
p131
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p132
(dp133
g4
((dp134
(dp135
tp136
sg17
(dp137
S'"Nodes not in molecule, need to add first"'
p138
Nssg19
(S'self'
p139
S'edge'
p140
S'node1'
p141
S'node2'
p142
tp143
sg22
(dp144
g141
(NNNtp145
sg139
(NNNtp146
sg140
(NNNtp147
sg142
(NNNtp148
ssg25
g26
sg27
S'(edge, node1, node2) -> add an edge between node1 and node2.\n        Edge must be an edge instance and node1 and node2 must be node\n        instances'
p149
sg29
g131
sg30
g7
sg31
g32
sg35
(dp150
sg37
g134
sg38
g135
sg39
S''
sbsS'to_matcher'
p151
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p152
(dp153
g4
((dp154
(dp155
tp156
sg17
(dp157
sg19
(S'self'
p158
tp159
sg22
(dp160
g158
(NNNtp161
ssg25
g26
sg27
S'->create a matching graph from this graph'
p162
sg29
g151
sg30
g7
sg31
g32
sg35
(dp163
sg37
g154
sg38
g155
sg39
S''
sbsS'__init__'
p164
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p165
(dp166
g4
((dp167
(dp168
tp169
sg17
(dp170
sg19
(S'self'
p171
S'nodes'
p172
S'edges'
p173
S'undirected'
p174
tp175
sg22
(dp176
g174
(I1
S'1'
Ntp177
sg171
(NNNtp178
sg173
(I1
S'None'
Ntp179
sg172
(I1
S'None'
Ntp180
ssg25
g26
sg27
S'(undirected=1)->initialize a graph structure\n        undirected=1 makes an undirected graph\n        undirected=0 makes a directed graph'
p181
sg29
g164
sg30
g7
sg31
g32
sg35
(dp182
sg37
g167
sg38
g168
sg39
S''
sbsS'remove_edge'
p183
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p184
(dp185
g4
((dp186
(dp187
tp188
sg17
(dp189
sg19
(S'self'
p190
S'edge'
p191
tp192
sg22
(dp193
g190
(NNNtp194
sg191
(NNNtp195
ssg25
g26
sg27
S'(edge)->remove edge from the graph'
p196
sg29
g183
sg30
g7
sg31
g32
sg35
(dp197
sg37
g186
sg38
g187
sg39
S''
sbstp198
sg25
g26
sg27
S''
sS'_class_member_info'
p199
(lp200
sg29
g6
sg30
g2
sg31
g32
sS'_base_class_info'
p201
(lp202
sg35
(dp203
sg37
g9
sg38
g10
sg39
S''
sbs(dp204
S'is_remove'
p205
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p206
(dp207
g4
((dp208
(dp209
tp210
sg17
(dp211
sg19
(S'list'
p212
S'object'
p213
tp214
sg22
(dp215
g213
(NNNtp216
sg212
(NNNtp217
ssg25
g26
sg27
S'remove objects from a list using is equivalence instead\n    of comparison equivalence'
p218
sg29
g205
sg30
g2
sg31
g32
sg35
(dp219
sg37
g208
sg38
g209
sg39
g34
sbstp220
sS'_import_info'
p221
(ihappydoclib.parseinfo.imports
ImportInfo
p222
(dp223
S'_named_imports'
p224
(dp225
S'Matcher'
p226
(lp227
S'Matcher'
p228
assS'_straight_imports'
p229
(lp230
S'vflib'
p231
asbsg25
g26
sg27
S'"""Graph\n   a class for graph manipulation\n\n"""'
p232
sg29
S'Graph'
p233
sg30
Nsg31
g32
sg35
(dp234
S'include_comments'
p235
I1
sS'cacheFilePrefix'
p236
S'.happydoc.'
p237
sS'useCache'
p238
I1
sS'docStringFormat'
p239
S'StructuredText'
p240
ssg37
g5
sg38
g204
sg39
S''
sbt.