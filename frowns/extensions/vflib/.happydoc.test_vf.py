(S'8944dbfa78eaebfb666d8fb6c07c6634'
p1
(ihappydoclib.parseinfo.moduleinfo
ModuleInfo
p2
(dp3
S'_namespaces'
p4
((dp5
S'Core'
p6
(ihappydoclib.parseinfo.classinfo
ClassInfo
p7
(dp8
g4
((dp9
(dp10
S'to_graphviz'
p11
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p12
(dp13
g4
((dp14
(dp15
tp16
sS'_exception_info'
p17
(dp18
sS'_parameter_names'
p19
(S'self'
p20
tp21
sS'_parameter_info'
p22
(dp23
g20
(NNNtp24
ssS'_filename'
p25
S'../python/frowns/extensions/vflib/test_vf.py'
p26
sS'_docstring'
p27
S'return a dotty compatible graph'
p28
sS'_name'
p29
g11
sS'_parent'
p30
g7
sS'_comment_info'
p31
(dp32
sS'_configuration_values'
p33
(dp34
sS'_class_info'
p35
g14
sS'_function_info'
p36
g15
sS'_comments'
p37
S''
sbsS'to_graph'
p38
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p39
(dp40
g4
((dp41
(dp42
tp43
sg17
(dp44
sg19
(S'self'
p45
tp46
sg22
(dp47
g45
(NNNtp48
ssg25
g26
sg27
S'()->ARGEdit()\n        return an ARGEdit object that can be used as a match graph\n        or a target graph'
p49
sg29
g38
sg30
g7
sg31
g32
sg33
(dp50
sg35
g41
sg36
g42
sg37
S''
sbsS'clone'
p51
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p52
(dp53
g4
((dp54
(dp55
tp56
sg17
(dp57
sg19
(S'self'
p58
tp59
sg22
(dp60
g58
(NNNtp61
ssg25
g26
sg27
S'()->return a clone of this core'
p62
sg29
g51
sg30
g7
sg31
g32
sg33
(dp63
sg35
g54
sg36
g55
sg37
S''
sbsS'InsertNode'
p64
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p65
(dp66
g4
((dp67
(dp68
tp69
sg17
(dp70
sg19
(S'self'
p71
S'data'
p72
tp73
sg22
(dp74
g71
(NNNtp75
sg72
(NNNtp76
ssg25
g26
sg27
S'(data) -> node index\n        Add a node to a graph returning the index of the new node'
p77
sg29
g64
sg30
g7
sg31
g32
sg33
(dp78
sg35
g67
sg36
g68
sg37
S''
sbsS'__init__'
p79
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p80
(dp81
g4
((dp82
(dp83
tp84
sg17
(dp85
sg19
(S'self'
p86
S'nodes'
p87
S'edges'
p88
S'undirected'
p89
tp90
sg22
(dp91
g89
(I1
S'0'
Ntp92
sg86
(NNNtp93
sg88
(I1
S'None'
Ntp94
sg87
(I1
S'None'
Ntp95
ssg25
g26
sg27
S''
sg29
g79
sg30
g7
sg31
g32
sg33
(dp96
sg35
g82
sg36
g83
sg37
S''
sbsS'to_connection_table'
p97
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p98
(dp99
g4
((dp100
(dp101
tp102
sg17
(dp103
sg19
(S'self'
p104
tp105
sg22
(dp106
g104
(NNNtp107
ssg25
g26
sg27
S'return a connection table graph'
p108
sg29
g97
sg30
g7
sg31
g32
sg33
(dp109
sg35
g100
sg36
g101
sg37
S''
sbsS'InsertEdge'
p110
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p111
(dp112
g4
((dp113
(dp114
tp115
sg17
(dp116
sg19
(S'self'
p117
S'start'
p118
S'end'
p119
S'data'
p120
tp121
sg22
(dp122
g118
(NNNtp123
sg117
(NNNtp124
sg119
(NNNtp125
sg120
(NNNtp126
ssg25
g26
sg27
S'(start, end, data) -> Add an edge to a graph from start to end.\n        The edge has type data'
p127
sg29
g110
sg30
g7
sg31
g32
sg33
(dp128
sg35
g113
sg36
g114
sg37
S''
sbstp129
sg25
g26
sg27
S'Core -> stores the core of a graph'
p130
sS'_class_member_info'
p131
(lp132
sg29
g6
sg30
g2
sg31
g32
sS'_base_class_info'
p133
(lp134
sg33
(dp135
sg35
g9
sg36
g10
sg37
S''
sbs(dp136
S'grow_core'
p137
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p138
(dp139
g4
((dp140
(dp141
tp142
sg17
(dp143
S'"Too many iterations in while loop!"'
p144
Nssg19
(S'maxnodes'
p145
S'maxedges'
p146
S'probNew'
p147
S'undirected'
p148
tp149
sg22
(dp150
g145
(I1
S'100'
Ntp151
sg148
(I1
S'1'
Ntp152
sg146
(I1
S'1000'
Ntp153
sg147
(I1
S'0.5'
Ntp154
ssg25
g26
sg27
S''
sg29
g137
sg30
g2
sg31
g32
sg33
(dp155
sg35
g140
sg36
g141
sg37
S''
sbsS'add_to_core'
p156
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p157
(dp158
g4
((dp159
(dp160
tp161
sg17
(dp162
S'"Too many iterations in while loop!"'
p163
Nssg19
(S'G'
S'maxnodes'
p164
S'maxedges'
p165
tp166
sg22
(dp167
g164
(I1
S'100'
Ntp168
sg165
(I1
S'1000'
Ntp169
sS'G'
(NNNtp170
ssg25
g26
sg27
S''
sg29
g156
sg30
g2
sg31
g32
sg33
(dp171
sg35
g159
sg36
g160
sg37
S''
sbsS'test'
p172
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p173
(dp174
g4
((dp175
(dp176
tp177
sg17
(dp178
sg19
(S'num_cores'
p179
S'num_extensions'
p180
tp181
sg22
(dp182
g179
(I1
S'5'
Ntp183
sg180
(I1
S'5'
Ntp184
ssg25
g26
sg27
S''
sg29
g172
sg30
g2
sg31
g32
sg33
(dp185
sg35
g175
sg36
g176
sg37
S''
sbsS'make_core'
p186
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p187
(dp188
g4
((dp189
(dp190
tp191
sg17
(dp192
S'"Too many iterations in while loop!"'
p193
Nssg19
(S'maxnodes'
p194
S'maxedges'
p195
tp196
sg22
(dp197
g194
(I1
S'100'
Ntp198
sg195
(I1
S'1000'
Ntp199
ssg25
g26
sg27
S''
sg29
g186
sg30
g2
sg31
g32
sg33
(dp200
sg35
g189
sg36
g190
sg37
S''
sbsS'test_reference_count_bug'
p201
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p202
(dp203
g4
((dp204
(dp205
tp206
sg17
(dp207
sg19
(tsg22
(dp208
sg25
g26
sg27
S''
sg29
g201
sg30
g2
sg31
g32
sg33
(dp209
sg35
g204
sg36
g205
sg37
S''
sbstp210
sS'_import_info'
p211
(ihappydoclib.parseinfo.imports
ImportInfo
p212
(dp213
S'_named_imports'
p214
(dp215
sS'_straight_imports'
p216
(lp217
S'vflib'
p218
aS'random'
p219
aS'types'
p220
asbsg25
g26
sg27
S'vflib  positive testing\n This test checks the Monomorphism substructure functions.\n A random core G is built\n Then this core is randomly extended to become H\n\n G should still be contained in H (using monomorphism)\n\n This should also give a good idea how to build your own\n graphs.\n'
p221
sg29
S'test_vf'
p222
sg30
Nsg31
g32
sg33
(dp223
S'include_comments'
p224
I1
sS'cacheFilePrefix'
p225
S'.happydoc.'
p226
sS'useCache'
p227
I1
sS'docStringFormat'
p228
S'StructuredText'
p229
ssg35
g5
sg36
g136
sg37
S''
sbt.