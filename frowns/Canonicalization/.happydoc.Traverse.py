(S'cd1fa3a91cdd47fc48d66dea479da68c'
p1
(ihappydoclib.parseinfo.moduleinfo
ModuleInfo
p2
(dp3
S'_namespaces'
p4
((dp5
(dp6
S'_traverse'
p7
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p8
(dp9
g4
((dp10
(dp11
tp12
sS'_exception_info'
p13
(dp14
sS'_parameter_names'
p15
(S'atom'
p16
S'traverse'
p17
S'prevAtom'
p18
S'visitedAtoms'
p19
S'visitedBonds'
p20
S'atoms'
p21
S'bonds'
p22
S'Traversal'
p23
S'bondIndex'
p24
tp25
sS'_parameter_info'
p26
(dp27
g20
(NNNtp28
sg17
(NNNtp29
sg24
(I1
S'0'
Ntp30
sg22
(NNNtp31
sg18
(NNNtp32
sg21
(NNNtp33
sg16
(NNNtp34
sg19
(NNNtp35
sg23
(NNNtp36
ssS'_filename'
p37
S'../python/frowns/Canonicalization/Traverse.py'
p38
sS'_docstring'
p39
S''
sS'_name'
p40
g7
sS'_parent'
p41
g2
sS'_comment_info'
p42
(dp43
sS'_configuration_values'
p44
(dp45
sS'_class_info'
p46
g10
sS'_function_info'
p47
g11
sS'_comments'
p48
S''
sbsS'draw'
p49
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p50
(dp51
g4
((dp52
(dp53
tp54
sg13
(dp55
sg15
(S'molecule'
p56
S'TraversalType'
p57
tp58
sg26
(dp59
g57
(I1
S'SmilesTraversal'
Ntp60
sg56
(NNNtp61
ssg37
g38
sg39
S"(molecule)->canonical representation of a molecule\n    Well, it's only canonical if the atom symorders are\n    canonical, otherwise it's arbitrary.\n\n    atoms must have a symorder attribute\n    bonds must have a equiv_class attribute"
p62
sg40
g49
sg41
g2
sg42
g43
sg44
(dp63
sg46
g52
sg47
g53
sg48
S''
sbsS'drawIsomeric'
p64
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p65
(dp66
g4
((dp67
(dp68
tp69
sg13
(dp70
sg15
(S'molecule'
p71
tp72
sg26
(dp73
g71
(NNNtp74
ssg37
g38
sg39
S''
sg40
g64
sg41
g2
sg42
g43
sg44
(dp75
sg46
g67
sg47
g68
sg48
S''
sbsS'drawSmarts'
p76
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p77
(dp78
g4
((dp79
(dp80
tp81
sg13
(dp82
sg15
(S'molecule'
p83
tp84
sg26
(dp85
g83
(NNNtp86
ssg37
g38
sg39
S''
sg40
g76
sg41
g2
sg42
g43
sg44
(dp87
sg46
g79
sg47
g80
sg48
S''
sbsS'_get_lowest_symorder'
p88
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p89
(dp90
g4
((dp91
(dp92
tp93
sg13
(dp94
sg15
(S'atoms'
p95
tp96
sg26
(dp97
g95
(NNNtp98
ssg37
g38
sg39
S''
sg40
g88
sg41
g2
sg42
g43
sg44
(dp99
sg46
g91
sg47
g92
sg48
S''
sbstp100
sS'_import_info'
p101
(ihappydoclib.parseinfo.imports
ImportInfo
p102
(dp103
S'_named_imports'
p104
(dp105
S'SmilesTraversal'
p106
(lp107
S'SmilesTraversal'
p108
aS'SmartsTraversal'
p109
aS'IsomericSmilesTraversal'
p110
assS'_straight_imports'
p111
(lp112
sbsg37
g38
sg39
S'"""Recursively traverse a molecule building up a canonical\nrepresentation.\n\nEach atom of a Molecule or Graph must have a attribute \'symorder\' which\nis a unique number.  This number guarantees only one traversal for\nthe graph.\n\nAdditionally each bond must have an attribute equiv_class which is\na unique value for each different type of bond.  This guarantees\nproper canonicalization of bonds as well as atoms.\n\ncanonical_string = Traverse.draw(molecule)\n\nAdvanced usage:\ncanonical_string = Traverse.draw(molecule, TraversalType)\n\nTraversalType controls how the traversal is represented.\nSmilesTraversal is the default TraversalType but this can be\nsubclassed for different representations.  For example it is\neasy to create a subclass to generate Tripos Line formats.\n"""'
p113
sg40
S'Traverse'
p114
sg41
Nsg42
g43
sg44
(dp115
S'include_comments'
p116
I1
sS'cacheFilePrefix'
p117
S'.happydoc.'
p118
sS'useCache'
p119
I1
sS'docStringFormat'
p120
S'StructuredText'
p121
ssg46
g5
sg47
g6
sg48
S''
sbt.