(S'a20309f20ca805879dd4259c5cad0ac1'
p1
(ihappydoclib.parseinfo.moduleinfo
ModuleInfo
p2
(dp3
S'_namespaces'
p4
((dp5
S'FreedDisambiguate'
p6
(ihappydoclib.parseinfo.classinfo
ClassInfo
p7
(dp8
g4
((dp9
(dp10
S'findInvariantPartitioning'
p11
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p12
(dp13
g4
((dp14
(dp15
tp16
sS'_exception_info'
p17
(dp18
sS'_parameter_names'
p19
(S'self'
p20
tp21
sS'_parameter_info'
p22
(dp23
g20
(NNNtp24
ssS'_filename'
p25
S'../python/frowns/Canonicalization/Disambiguate.py'
p26
sS'_docstring'
p27
S'Keep the initial ordering of the symmetry orders\n        but make all values unique.  For example, if there are\n        two symmetry orders equal to 0, convert them to 0 and 1\n        and add 1 to the remaining orders\n\n          [0, 1, 0, 1]\n        should become\n          [0, 2, 1, 3]'
p28
sS'_name'
p29
g11
sS'_parent'
p30
g7
sS'_comment_info'
p31
(dp32
sS'_configuration_values'
p33
(dp34
sS'_class_info'
p35
g14
sS'_function_info'
p36
g15
sS'_comments'
p37
S''
sbsS'rank'
p38
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p39
(dp40
g4
((dp41
(dp42
tp43
sg17
(dp44
sg19
(S'self'
p45
tp46
sg22
(dp47
g45
(NNNtp48
ssg25
g26
sg27
S'convert a list of integers so that the lowest integer\n        is 0, the next lowest is 1 ...\n        note: modifies list in place'
p49
sg29
g38
sg30
g7
sg31
g32
sg33
(dp50
sg35
g41
sg36
g42
sg37
S''
sbsS'breakRankTies'
p51
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p52
(dp53
g4
((dp54
(dp55
tp56
sg17
(dp57
sg19
(S'self'
p58
S'oldsym'
p59
S'newsym'
p60
tp61
sg22
(dp62
g60
(NNNtp63
sg58
(NNNtp64
sg59
(NNNtp65
ssg25
g26
sg27
S'break Ties to form a new list with the same integer ordering\n        from high to low\n\n        Example\n        old = [ 4, 2, 4, 7, 8]  (Two ties, 4 and 4)\n        new = [60, 2 61,90,99]\n        res = [ 4, 0, 3, 1, 2]\n                *     *        This tie is broken in this case\n        '
p66
sg29
g51
sg30
g7
sg31
g32
sg33
(dp67
sg35
g54
sg36
g55
sg37
S''
sbsS'disambiguate'
p68
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p69
(dp70
g4
((dp71
(dp72
tp73
sg17
(dp74
sg19
(S'self'
p75
S'symclasses'
p76
tp77
sg22
(dp78
g75
(NNNtp79
sg76
(NNNtp80
ssg25
g26
sg27
S'Use the connection to the atoms around a given vertex\n        as a multiplication function to disambiguate a vertex'
p81
sg29
g68
sg30
g7
sg31
g32
sg33
(dp82
sg35
g71
sg36
g72
sg37
S''
sbsS'findInvariant'
p83
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p84
(dp85
g4
((dp86
(dp87
tp88
sg17
(dp89
sg19
(S'self'
p90
S'symclasses'
p91
tp92
sg22
(dp93
g90
(NNNtp94
sg91
(NNNtp95
ssg25
g26
sg27
S'(symclasses) -> converge the disambiguity function\n        until we have an invariant'
p96
sg29
g83
sg30
g7
sg31
g32
sg33
(dp97
sg35
g86
sg36
g87
sg37
S''
sbsS'findLowest'
p98
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p99
(dp100
g4
((dp101
(dp102
tp103
sg17
(dp104
sg19
(S'self'
p105
S'symorders'
p106
tp107
sg22
(dp108
g105
(NNNtp109
sg106
(NNNtp110
ssg25
g26
sg27
S'Find the position of the first lowest tie in a\n        symorder or -1 if there are no ties'
p111
sg29
g98
sg30
g7
sg31
g32
sg33
(dp112
sg35
g101
sg36
g102
sg37
S''
sbsS'__init__'
p113
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p114
(dp115
g4
((dp116
(dp117
tp118
sg17
(dp119
sg19
(S'self'
p120
S'graph'
p121
tp122
sg22
(dp123
g121
(NNNtp124
sg120
(NNNtp125
ssg25
g26
sg27
S"(graph)\n        \n        given atom and bond equiv_classes use Freed's technique to\n        find symmettry classes and symmetry orders for the graph\n        "
p126
sg29
g113
sg30
g7
sg31
g32
sg33
(dp127
sg35
g116
sg36
g117
sg37
S''
sbstp128
sg25
g26
sg27
S''
sS'_class_member_info'
p129
(lp130
sg29
g6
sg30
g2
sg31
g32
sS'_base_class_info'
p131
(lp132
sg33
(dp133
sg35
g9
sg36
g10
sg37
S''
sbs(dp134
tp135
sS'_import_info'
p136
(ihappydoclib.parseinfo.imports
ImportInfo
p137
(dp138
S'_named_imports'
p139
(dp140
sS'_straight_imports'
p141
(lp142
S'Primes'
p143
asbsg25
g26
sg27
S'"""Disambiguate\n\nFreedDisambiguate(graph)\n\ngiven atom and bond equiv_classes use Freed\'s technique to\nfind symmettry classes and symmetry orders for the graph\n\nThese were initial described in the following papers published in\nJCICS\n   1. WEININGER D,\n     "SMILES, A chemical language and information-system. 1.\n      Introductions to methodology and encoding rules"\n\n      JOURNAL OF CHEMICAL INFORMATION AND COMPUTER SCIENCES,28(#1),\n      1988,31-36 \n   2. WEININGER D, WEININGER A, WEININGER JL,\n     "SMILES 2. Algorithm for generation of unique SMILES notation"\n\n     JOURNAL OF CHEMICAL INFORMATION AND COMPUTER SCIENCES,29(#2),\n     1989,97-101 \n\nThey do not talk about canonicalizing using bond types or stereo\nchemistry though.  See notes below for details.\n"""'
p144
sg29
S'Disambiguate'
p145
sg30
Nsg31
g32
sg33
(dp146
S'include_comments'
p147
I1
sS'cacheFilePrefix'
p148
S'.happydoc.'
p149
sS'useCache'
p150
I1
sS'docStringFormat'
p151
S'StructuredText'
p152
ssg35
g5
sg36
g134
sg37
S''
sbt.