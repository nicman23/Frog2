(S'a83a347c573bb1fd33a30072135b838a'
p1
(ihappydoclib.parseinfo.moduleinfo
ModuleInfo
p2
(dp3
S'_namespaces'
p4
((dp5
S'SplitFingerlist'
p6
(ihappydoclib.parseinfo.classinfo
ClassInfo
p7
(dp8
g4
((dp9
(dp10
S'addPath'
p11
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p12
(dp13
g4
((dp14
(dp15
tp16
sS'_exception_info'
p17
(dp18
sS'_parameter_names'
p19
(S'self'
p20
S'length'
p21
S'path'
p22
tp23
sS'_parameter_info'
p24
(dp25
g22
(NNNtp26
sg20
(NNNtp27
sg21
(NNNtp28
ssS'_filename'
p29
S'../python/frowns/Fingerprint/Fingerlist.py'
p30
sS'_docstring'
p31
S''
sS'_name'
p32
g11
sS'_parent'
p33
g7
sS'_comment_info'
p34
(dp35
(S'Fingerlist'
tp36
S' We also need a good way to cache these to disk.  I suppose\n cPickle will work just fine for now...\n'
p37
ssS'_configuration_values'
p38
(dp39
sS'_class_info'
p40
g14
sS'_function_info'
p41
g15
sS'_comments'
p42
S''
sbsS'to_list'
p43
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p44
(dp45
g4
((dp46
(dp47
tp48
sg17
(dp49
sg19
(S'self'
p50
tp51
sg24
(dp52
g50
(NNNtp53
ssg29
g30
sg31
S''
sg32
g43
sg33
g7
sg34
g35
sg38
(dp54
sg40
g46
sg41
g47
sg42
S''
sbsS'__init__'
p55
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p56
(dp57
g4
((dp58
(dp59
tp60
sg17
(dp61
sg19
(S'self'
p62
S'maxdepth'
p63
S'integersPerPrint'
p64
tp65
sg24
(dp66
g62
(NNNtp67
sg63
(I1
S'7'
Ntp68
sg64
(I1
S'[ 4 ] * 6'
Ntp69
ssg29
g30
sg31
S''
sg32
g55
sg33
g7
sg34
g35
sg38
(dp70
sg40
g58
sg41
g59
sg42
S''
sbsS'__contains__'
p71
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p72
(dp73
g4
((dp74
(dp75
tp76
sg17
(dp77
sg19
(S'self'
p78
S'other'
p79
tp80
sg24
(dp81
g78
(NNNtp82
sg79
(NNNtp83
ssg29
g30
sg31
S''
sg32
g71
sg33
g7
sg34
g35
sg38
(dp84
sg40
g74
sg41
g75
sg42
S''
sbstp85
sg29
g30
sg31
S''
sS'_class_member_info'
p86
(lp87
sg32
g6
sg33
g2
sg34
g35
sS'_base_class_info'
p88
(lp89
sg38
(dp90
sg40
g9
sg41
g10
sg42
S''
sbsS'Fingerlist'
p91
(ihappydoclib.parseinfo.classinfo
ClassInfo
p92
(dp93
g4
((dp94
(dp95
S'addPath'
p96
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p97
(dp98
g4
((dp99
(dp100
tp101
sg17
(dp102
sg19
(S'self'
p103
S'path'
p104
tp105
sg24
(dp106
g104
(NNNtp107
sg103
(NNNtp108
ssg29
g30
sg31
S''
sg32
g96
sg33
g92
sg34
g35
sg38
(dp109
sg40
g99
sg41
g100
sg42
S''
sbsS'to_list'
p110
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p111
(dp112
g4
((dp113
(dp114
tp115
sg17
(dp116
sg19
(S'self'
p117
tp118
sg24
(dp119
g117
(NNNtp120
ssg29
g30
sg31
S''
sg32
g110
sg33
g92
sg34
g35
sg38
(dp121
sg40
g113
sg41
g114
sg42
S''
sbsS'__init__'
p122
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p123
(dp124
g4
((dp125
(dp126
tp127
sg17
(dp128
sg19
(S'self'
p129
S'numIntegers'
p130
S'fingerprint'
p131
tp132
sg24
(dp133
g129
(NNNtp134
sg130
(I1
S'1'
Ntp135
sg131
(I1
S'None'
Ntp136
ssg29
g30
sg31
S''
sg32
g122
sg33
g92
sg34
g35
sg38
(dp137
sg40
g125
sg41
g126
sg42
S''
sbsS'__contains__'
p138
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p139
(dp140
g4
((dp141
(dp142
tp143
sg17
(dp144
S'"Fingerlists not the same size!"'
p145
Nssg19
(S'self'
p146
S'other'
p147
tp148
sg24
(dp149
g146
(NNNtp150
sg147
(NNNtp151
ssg29
g30
sg31
S''
sg32
g138
sg33
g92
sg34
g35
sg38
(dp152
sg40
g141
sg41
g142
sg42
S''
sbstp153
sg29
g30
sg31
S''
sg86
(lp154
sg32
g91
sg33
g2
sg34
g35
sg88
(lp155
sg38
(dp156
sg40
g94
sg41
g95
sg42
g37
sbs(dp157
S'test'
p158
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p159
(dp160
g4
((dp161
(dp162
tp163
sg17
(dp164
sg19
(tsg24
(dp165
sg29
g30
sg31
S''
sg32
g158
sg33
g2
sg34
g35
sg38
(dp166
sg40
g161
sg41
g162
sg42
S''
sbstp167
sS'_import_info'
p168
(ihappydoclib.parseinfo.imports
ImportInfo
p169
(dp170
S'_named_imports'
p171
(dp172
sS'_straight_imports'
p173
(lp174
S'random'
p175
asbsg29
g30
sg31
S'"""Fingerprint\n generate fingerprints from molecules.\n\n fp = Fingerprint(numIntegers)\n   Generate a fingerprint object that stores fingerprints\n   in an array of numIntegers.\n\n fp.addPath(path)\n   add a path to the fingerprint.  path is any str\'able\n   value.\n\n fp in fp2\n   returns 1 if the fingerprint fp is a contained in the fingerprint\n   fp2.\n\n   This might be a bastardazation of __contains__ but I sort\n   of like it.\n   \n The method for creating fingerprints is remarkably simple.\n\n a sequence of non branching paths is extracted from a molecule.\n A path is a string value named atoms and named bonds\n through the traversal.  For instance:\n \'C-C-C-C-N\' or even \'Carbon through single bond to Carbon\'.\n Any string will do as long as the string is always the\n same for the same path through the same or other molecules.\n\n For each path\n  1 convert the string to an integer value and use it to\n    seed a random number generator\n    (random.seed can use any hashable value as the seed!\n     python, again, is cool!)\n    random.seed(path)\n  2 pull out two random integers from the seeded generator\n    index = int(random.random() * NUM_INTS)\n    bit   = int(random.random() * INT_SIZE)\n\n  fingerprint[index] = fingerprint[index] | 1<<bit\n\n we store a fingerprint as an array of integers.  Each integer\n has a certain number of bits that can be flipped.  The process\n of adding a path to a fingerprint is simply choosing the index\n and bit position for a path.  The above procedure does this\n in a deterministic fashion.\n"""'
p176
sg32
S'Fingerlist'
p177
sg33
Nsg34
g35
sg38
(dp178
S'include_comments'
p179
I1
sS'cacheFilePrefix'
p180
S'.happydoc.'
p181
sS'useCache'
p182
I1
sS'docStringFormat'
p183
S'StructuredText'
p184
ssg40
g5
sg41
g157
sg42
S''
sbt.